name: Build, Package, Release [dev]

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: "1.21"

      - name: Checkout repository
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MO_CLI_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: 
          echo "current tag=$(git describe --tags --abbrev=0)" 
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
  
      - name: Bump version
        id: bump_version
        run: |
          # Neueste Commit-Nachricht abrufen
          commit_message=$(git log -1 --pretty=%B)
          # Alte Version ohne das 'v'
          version=${tag/v/}
          # Version in Major, Minor, Patch aufteilen
          IFS='.' read -r major minor patch <<< "$version"
          # Basierend auf Commit-Nachricht die Version erhöhen
          if [[ "$commit_message" == fix:* ]]; then
            patch=$((patch + 1))  # Patch erhöhen
          elif [[ "$commit_message" == feat:* ]]; then
            minor=$((minor + 1))  # Minor erhöhen
            patch=0  # Patch zurücksetzen
          elif [[ "$commit_message" == chore:* ]]; then
            major=$((major + 1))  # Major erhöhen
            minor=0  # Minor zurücksetzen
            patch=0  # Patch zurücksetzen
          else
            echo "No version bump for commit message: $commit_message"
            exit 0
          fi
          # Neue Version erstellen
          new_version="v${major}.${minor}.${patch}"
          # Prüfen, ob der aktuelle Branch 'develop' ist
    
          branch_name=$(echo "${GITHUB_REF##*/}")
          if [[ "$branch_name" == "develop" ]]; then
            new_version="${new_version}-develop"
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "::set-output name=new_version::$new_version"
  
      - name: Create new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Create release in another repo
        run: |
          echo "Creating release ${tag}"
          gh release create refs/tags/${tag} --title "Release ${tag}" --repo ruedigerp/homebrew-dns-manager
        env:
          GH_TOKEN: ${{ secrets.MO_CLI_TOKEN }}

      - name: Execute make all
        run: make -f Makefile-dev all

      - name: Package artefacts
        run: |
          for file in builds/*; do
            tar -czvf builds/$(basename "$file").tar.gz -C builds $(basename "$file")
          done
          ls -lisa builds

      - name: Upload tarballs/executables
        run: |
          ls -lisa builds
          for tarball in builds/*.tar.gz; do
            gh release upload "${tag}" "$tarball" --repo ruedigerp/homebrew-dns-manager-dev
          done
          gh release upload "${tag}" "builds/dns-manager-dev-${tag}-windows-amd64" --repo ruedigerp/homebrew-dns-manager-dev
        env:
          GH_TOKEN: ${{ secrets.MO_CLI_TOKEN }}

      - name: Update Homebrew & Scoop
        run: |
          ./release-dev.sh
          git config --global user.email "ruediger@pretzlaff.info"
          git config --global user.name "ruedigerp"
          git config --global credential.helper cache
          git clone https://${{secrets.MO_CLI_TOKEN}}@github.com/ruedigerp/homebrew-dns-manager-dev
          cd homebrew-dns-manager-dev
          cp ../dns-manager-dev.rb .
          cp ../dns-manager-dev.json .
          cp ../CHANGELOG.md .
          git add .
          git commit -m " ${tag}"
          git push
        env:
          GH_TOKEN: ${{ secrets.MO_CLI_TOKEN }}