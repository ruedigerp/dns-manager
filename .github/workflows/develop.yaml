name: Build, Package, Release [dev]

on:
  push:
    branches:
      - developX

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: "1.21"

      - name: Checkout repository
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MO_CLI_TOKEN }}

      # - name: Install Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: "18"

      # - name: Install dependencies
      #   run: npm install

      # - name: Apply Changesets
      #   id: changesets
      #   run: |
      #     # Bump the version and commit the changes
      #     npx changeset version
      #     # Push the changes back to the repo
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git push --follow-tags origin ${{ github.ref_name }}

      # - name: Extract new version
      #   id: get_version
      #   run: echo "tag=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
      # - name: Create Sematic Release Version
      #   run: |
      #     git config --global user.email "ruediger@pretzlaff.info"
      #     git config --global user.name "ruedigerp"
      #     git config --global credential.helper cache
      #     npx standard-version --prerelease dev
      #     git push --follow-tags origin delevop

      # - name: release-please 
      #   uses: googleapis/release-please-action@v4
      #   id: release
      #   with:
      #     token: ${{ secrets.MO_CLI_TOKEN }}
      #     release-type: simple
      #     target-branch: ${{ github.ref_name }}

      # - name: Fetch latest tags
      #   run: git fetch --tags
      
      # - name: Get latest version tag
      #   id: get_tag
      #   # run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      #   run: echo "tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      # - name: Debug Outputs
      #   run: | 
      #     echo "Outputs: ${{ toJson(steps.release.outputs) }}"

      # - name: Get the current version
      #   id: get_version
      #   run: echo "VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Create release in another repo
        run: |
          echo "Creating release ${tag}"
          gh release create refs/tags/${tag} --title "Release ${tag}" --repo ruedigerp/homebrew-dns-manager
        env:
          GH_TOKEN: ${{ secrets.MO_CLI_TOKEN }}

      - name: Execute make all
        run: make -f Makefile-dev all

      - name: Package artefacts
        run: |
          for file in builds/*; do
            tar -czvf builds/$(basename "$file").tar.gz -C builds $(basename "$file")
          done
          ls -lisa builds

      - name: Upload tarballs/executables
        run: |
          ls -lisa builds
          for tarball in builds/*.tar.gz; do
            gh release upload "${tag}" "$tarball" --repo ruedigerp/homebrew-dns-manager-dev
          done
          gh release upload "${tag}" "builds/dns-manager-dev-${tag}-windows-amd64" --repo ruedigerp/homebrew-dns-manager-dev
        env:
          GH_TOKEN: ${{ secrets.MO_CLI_TOKEN }}

      - name: Update Homebrew & Scoop
        run: |
          ./release-dev.sh
          git config --global user.email "ruediger@pretzlaff.info"
          git config --global user.name "ruedigerp"
          git config --global credential.helper cache
          git clone https://${{secrets.MO_CLI_TOKEN}}@github.com/ruedigerp/homebrew-dns-manager-dev
          cd homebrew-dns-manager-dev
          cp ../dns-manager-dev.rb .
          cp ../dns-manager-dev.json .
          cp ../CHANGELOG.md .
          git add .
          git commit -m " ${tag}"
          git push
        env:
          GH_TOKEN: ${{ secrets.MO_CLI_TOKEN }}