name: Build, Package, Release [dev]

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Get latest tag
      id: get_tag
      run: |
        current_tag=$(git describe --tags --abbrev=0)
        echo "current tag=$current_tag"
        echo "tag=$current_tag" >> $GITHUB_ENV
    
    - name: Bump version
      id: bump_version
      run: |
        # Neueste Commit-Nachricht abrufen
        commit_message=$(git log -1 --pretty=%B)
        echo "Commit message: $commit_message"
        
        # Alte Version ohne das 'v'
        version=${tag/v/}
        echo "Current version: $version"
        
        # Version in Major, Minor, Patch aufteilen
        IFS='.' read -r major minor patch <<< "$version"
        echo "Parsed version: major=$major, minor=$minor, patch=$patch"
        
        # Basierend auf Commit-Nachricht die Version erhöhen
        if [[ "$commit_message" == fix:* ]]; then
          patch=$((patch + 1))  # Patch erhöhen
          echo "Bumping patch version"
        elif [[ "$commit_message" == feat:* ]]; then
          minor=$((minor + 1))  # Minor erhöhen
          patch=0  # Patch zurücksetzen
          echo "Bumping minor version"
        elif [[ "$commit_message" == chore:* ]]; then
          major=$((major + 1))  # Major erhöhen
          minor=0  # Minor zurücksetzen
          patch=0  # Patch zurücksetzen
          echo "Bumping major version"
        else
          echo "No version bump for commit message: $commit_message"
          exit 0
        fi
        
        # Neue Version erstellen
        new_version="v${major}.${minor}.${patch}"
        echo "New version: $new_version"
        echo "new_version=$new_version" >> $GITHUB_ENV
    
    - name: Create new tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ env.new_version }}
        git push origin ${{ env.new_version }}

    - name: Create release in another repo
      run: |
        echo "Creating release ${tag}"
        gh release create refs/tags/${tag} --title "Release ${tag}" --repo ruedigerp/homebrew-dns-manager
      env:
        GH_TOKEN: ${{ secrets.FG_PAT_HOMEBREW_2025 }}

    - name: Execute make all
      run: make -f Makefile-dev all

    - name: Package artefacts
      run: |
        for file in builds/*; do
          tar -czvf builds/$(basename "$file").tar.gz -C builds $(basename "$file")
        done
        ls -lisa builds

    - name: Upload tarballs/executables
      run: |
        ls -lisa builds
        for tarball in builds/*.tar.gz; do
          gh release upload "${tag}" "$tarball" --repo ruedigerp/homebrew-dns-manager-dev
        done
        gh release upload "${tag}" "builds/dns-manager-dev-${tag}-windows-amd64" --repo ruedigerp/homebrew-dns-manager-dev
      env:
        GH_TOKEN: ${{ secrets.FG_PAT_HOMEBREW_2025 }}

    - name: Update Homebrew & Scoop
      run: |
        ./release-dev.sh
        git config --global user.email "ruediger@pretzlaff.info"
        git config --global user.name "ruedigerp"
        git config --global credential.helper cache
        git clone https://${{secrets.FG_PAT_HOMEBREW_2025}}@github.com/ruedigerp/homebrew-dns-manager-dev
        cd homebrew-dns-manager-dev
        cp ../dns-manager-dev.rb .
        cp ../dns-manager-dev.json .
        cp ../CHANGELOG.md .
        git add .
        git commit -m " ${tag}"
        git push
      env:
        GH_TOKEN: ${{ secrets.FG_PAT_HOMEBREW_2025 }}