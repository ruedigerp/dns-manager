name: Build, Package, Release [dev]

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: "1.21"

      - name: Checkout repository
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_PAT }}

      - name: Get latest tag
        id: get_tag
        run: |
          echo "current tag=$(git describe --tags --abbrev=0)" 
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
  
      # - name: Get latest tag and bump version
      #   id: get_and_bump
      #   run: |
      #     # Aktuellen Tag abrufen
      #     current_tag=$(git describe --tags --abbrev=0)
      #     echo "Current tag: $current_tag"
          
      #     # Commit-Nachricht abrufen
      #     commit_message=$(git log -1 --pretty=%B)
      #     echo "Commit message: $commit_message"
          
      #     # Version ohne 'v' extrahieren
      #     version=${current_tag/v/}
      #     echo "Current version: $version"
          
      #     # Version in Komponenten aufteilen
      #     IFS='.' read -r major minor patch <<< "$version"
      #     echo "Parsed: major=$major, minor=$minor, patch=$patch"
          
      #     # Version basierend auf Commit-Message erhöhen
      #     if [[ "$commit_message" == fix:* ]]; then
      #       patch=$((patch + 1))
      #       echo "Bumping patch version"
      #     elif [[ "$commit_message" == feat:* ]]; then
      #       minor=$((minor + 1))
      #       patch=0
      #       echo "Bumping minor version"
      #     elif [[ "$commit_message" == chore:* ]]; then
      #       major=$((major + 1))
      #       minor=0
      #       patch=0
      #       echo "Bumping major version"
      #     else
      #       echo "No version bump for commit message: $commit_message"
      #       exit 0
      #     fi
          
      #     # Neue Version erstellen
      #     new_version="v${major}.${minor}.${patch}"
      #     echo "New version: $new_version"
      #     echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          # Neueste Commit-Nachricht abrufen
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_message"
          
          # Alte Version ohne das 'v' - KORREKTE Bash-Syntax für env variable
          version=${tag/v/}
          echo "Current version: $version"
          
          # Version in Major, Minor, Patch aufteilen
          IFS='.' read -r major minor patch <<< "$version"
          echo "Parsed: major=$major, minor=$minor, patch=$patch"
          
          # Basierend auf Commit-Nachricht die Version erhöhen
          if [[ "$commit_message" == fix:* ]]; then
            patch=$((patch + 1))
            echo "Bumping patch version"
          elif [[ "$commit_message" == feat:* ]]; then
            minor=$((minor + 1))
            patch=0
            echo "Bumping minor version"
          elif [[ "$commit_message" == chore:* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
            echo "Bumping major version"
          else
            echo "No version bump for commit message: $commit_message"
            exit 0
          fi
          
          # Neue Version erstellen
          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
          
      - name: Create new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Create release in another repo
        run: |
          echo "Creating release ${{ env.new_version }}"
          gh release create refs/tags/${{ env.new_version }} --title "Release ${{ env.new_version }}" --repo ruedigerp/homebrew-dns-manager
        env:
          GH_TOKEN: ${{ secrets.FG_PAT_HOMEBREW_2025 }}

      - name: Execute make all
        run: make -f Makefile-dev all

      - name: Package artefacts
        run: |
          for file in builds/*; do
            tar -czvf builds/$(basename "$file").tar.gz -C builds $(basename "$file")
          done
          ls -lisa builds

      - name: Upload tarballs/executables
        run: |
          ls -lisa builds
          for tarball in builds/*.tar.gz; do
            gh release upload "${{ env.new_version }}" "$tarball" --repo ruedigerp/homebrew-dns-manager
          done
          gh release upload "${{ env.new_version }}" "builds/dns-manager-${{ env.new_version }}-windows-amd64" --repo ruedigerp/homebrew-dns-manager
        env:
          GH_TOKEN: ${{ secrets.FG_PAT_HOMEBREW_2025 }}

      - name: Update Homebrew & Scoop
        run: |
          ./release.sh
          git config --global user.email "ruediger@pretzlaff.info"
          git config --global user.name "ruedigerp"
          git config --global credential.helper cache
          git clone https://${{secrets.FG_PAT_HOMEBREW_2025}}@github.com/ruedigerp/homebrew-dns-manager
          cd homebrew-dns-manager
          cp ../dns-manager.rb .
          cp ../dns-manager.json .
          cp ../CHANGELOG.md .
          git add .
          git commit -m " ${{ env.new_version }}"  # Hier war noch ${tag}
          git push
        env:
          GH_TOKEN: ${{ secrets.FG_PAT_HOMEBREW_2025 }}